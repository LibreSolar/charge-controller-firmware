/*
 * Copyright (c) 2019 STMicroelectronics.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * This is a dummy charge controller board for testing new features using the STM32G474 MCU
 *
 * IMPORTANT: You have to remove the VREF jumper on the Nucleo board to make it work. Otherwise
 *            the MCU will get stuck while trying to generate a reference voltage at VREF+ pin.
 */

/dts-v1/;
#include <st/g4/stm32g474Xe.dtsi>
#include <st/g4/stm32g474r(b-c-e)tx-pinctrl.dtsi>

/ {
	model = "STMicroelectronics STM32G474RE-NUCLEO board";
	compatible = "st,stm32g474re-nucleo";

	pcb {
		compatible = "charge-controller";

		type = "Nucleo G474 dummy charge controller";
		version-str = "v0.1";
		version-num = <1>;

		hs-voltage-max = <80>;
		ls-voltage-max = <32>;
		dcdc-current-max = <20>;
	};

	chosen {
		zephyr,console = &lpuart1;
		zephyr,shell-uart = &lpuart1;
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,can-primary = &can1;
	};

	leds {
		compatible = "charlieplexing-leds";
		gpios = <&gpioa 5 GPIO_ACTIVE_HIGH>;

		pwr {
			states = <1>;
		};
	};

	outputs {
		compatible = "outputs";

		can_en {
			label = "CAN disable / standby";
			gpios = <&gpiob 11 GPIO_ACTIVE_LOW>;
		};
	};

	adc-inputs {
		compatible = "adc-inputs";

		v-low {
			io-channels = <&adc1 12>;
			multiplier = <105600>;
			divider = <5600>;
		};

		v-high {
			io-channels = <&adc1 15>;
			multiplier = <102200>;
			divider = <2200>;
		};

		vref-mcu {
			io-channels = <&adc1 18>;
			multiplier = <1>;
			divider = <1>;
		};

		temp-mcu {
			io-channels = <&adc1 16>;
			multiplier = <1>;
			divider = <1>;
		};

		i-dcdc {
			io-channels = <&adc2 1>;
			// amp gain: 25, resistor: 2 mOhm
			multiplier = <1000>;	// 1000
			divider = <50>;	// 2*25
		};
	};

	gpio_keys {
		compatible = "gpio-keys";
		user_button: button {
			label = "User";
			gpios = <&gpioc 13 GPIO_ACTIVE_LOW>;
		};
	};

	aliases {
		sw0 = &user_button;
		uart-dbg = &lpuart1;
		uart-uext = &usart1;
		spi-uext = &spi1;
		i2c-uext = &i2c1;
	};

	soc {
		hrtim1: timers@40016800 {
			compatible = "st,stm32-timers";
			reg = <0x40016800 0x400>;
			clocks = <&rcc STM32_CLOCK_BUS_APB2 0x04000000>;
			interrupts = <67 0>, <68 0>, <69 0>, <70 0>,
				     <71 0>, <72 0>, <73 0>, <74 0>;
			interrupt-names = "master", "tima", "timb", "timc",
					  "timd", "time", "flt", "timf";
			status = "okay";
			label = "HRTIM_1";
		};

		/* below nodes are required until following PR is merged:
		 * https://github.com/zephyrproject-rtos/hal_stm32/pull/87
		 */
		pinctrl: pin-controller@48000000 {
			hrtim1_cha1_pa8: hrtim1_cha1_pa8 {
				pinmux = <STM32_PINMUX('A', 8, AF13)>;
			};

			hrtim1_cha2_pa9: hrtim1_cha2_pa9 {
				pinmux = <STM32_PINMUX('A', 9, AF13)>;
			};

			hrtim1_chb1_pa10: hrtim1_chb1_pa10 {
				pinmux = <STM32_PINMUX('A', 10, AF13)>;
			};

			hrtim1_chb2_pa11: hrtim1_chb2_pa11 {
				pinmux = <STM32_PINMUX('A', 11, AF13)>;
			};

			hrtim1_chc1_pb12: hrtim1_chc1_pb12 {
				pinmux = <STM32_PINMUX('B', 12, AF13)>;
			};

			hrtim1_chc2_pb13: hrtim1_chc2_pb13 {
				pinmux = <STM32_PINMUX('B', 13, AF13)>;
			};

			hrtim1_chd1_pb14: hrtim1_chd1_pb14 {
				pinmux = <STM32_PINMUX('B', 14, AF13)>;
			};

			hrtim1_chd2_pb15: hrtim1_chd2_pb15 {
				pinmux = <STM32_PINMUX('B', 15, AF13)>;
			};
		};
	};
};

&clk_hse {
	clock-frequency = <DT_FREQ_M(24)>;
	status = "okay";
};

&pll {
	div-m = <6>;
	mul-n = <85>;
	div-p = <7>;
	div-q = <2>;
	div-r = <2>;
	clocks = <&clk_hse>;
	status = "okay";
};

&rcc {
	clocks = <&pll>;
	clock-frequency = <DT_FREQ_M(170)>;
	ahb-prescaler = <1>;
	apb1-prescaler = <1>;
	apb2-prescaler = <1>;
};

&usart1 {
	pinctrl-0 = <&usart1_tx_pc4 &usart1_rx_pc5>;
	current-speed = <115200>;
	status = "okay";
};

&lpuart1 {
	pinctrl-0 = <&lpuart1_tx_pa2 &lpuart1_rx_pa3>;
	current-speed = <115200>;
	status = "okay";
};

&i2c1 {
	pinctrl-0 = <&i2c1_scl_pb8 &i2c1_sda_pb9>;
	status = "okay";
};

&spi1 {
	pinctrl-0 = <&spi1_nss_pa4 &spi1_sck_pb3
		     &spi1_miso_pa6 &spi1_mosi_pa7>;
	status = "okay";
};

&hrtim1 {
	status = "okay";

	halfbridge {
		compatible = "half-bridge";
		pinctrl-0 = <&hrtim1_cha1_pa8 &hrtim1_cha2_pa9>;
		frequency = <70000>;
		deadtime = <300>;
	};
};

/*
// alternative to HRTIM
&timers1 {
	status = "okay";

	halfbridge {
		compatible = "half-bridge";
		pinctrl-0 = <&tim1_ch1_pa8 &tim1_ch1n_pb13>;
		frequency = <70000>;
		deadtime = <300>;
	};
};
*/

&rtc {
	status = "okay";
};

&flash0 {
	/*
	 * For more information, see:
	 * http://docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
	 */
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		/* Set 2Kb of storage at the end of the 128Kb of flash */
		storage_partition: partition@1f800 {
			label = "storage";
			reg = <0x0001f800 0x00000800>;
		};
	};
};

&iwdg {
	status = "okay";
};

&rng {
	status = "okay";
};

&adc1 {
	pinctrl-0 = <&adc1_in1_pa0>;
	status = "okay";
};

&can1 {
	pinctrl-0 = <&fdcan1_rx_pa11 &fdcan1_tx_pa12>;
	bus-speed = <500000>;
	bus-speed-data = <500000>;
	sjw = <1>;
	sjw-data = <1>;
	sample-point = <875>;
	sample-point-data = <875>;
	status = "okay";
};
